# Simple workflow for deploying static content to GitHub Pages
name: Build and Release

# Copyright (C) 2025 Ava Glass <SuperNinja_4965>
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

on:
  push:
    tags:
      - "v*" # Version tags like v1.0.0
      - "beta-*" # Version tags like beta-0.0.1

# Allow one concurrent deployment
concurrency:
  group: "release"
  cancel-in-progress: true

jobs:
  # Single deploy job since we're just deploying
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    strategy:
      matrix:
        go-version: ["1.24"]

    steps:
      - name: Checkout (Full depth)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Use Go ${{ matrix.go-version }}
        uses: actions/setup-go@v5
        with:
          go-version: ${{ matrix.go-version }}

      - name: Install UPX
        run: |
          bash "$GITHUB_WORKSPACE/scripts/install-upx-linux.sh"

      - name: Install dependencies
        run: go mod download

      - name: Lint Code
        run: go tool golangci-lint run

      - name: Build Agent
        run: |
          mkdir build
          GOOS=linux GOARCH=amd64 go build -o ./build/glance-agent.x86_64
          GOOS=linux GOARCH=arm64 go build -o ./build/glance-agent.aarch64
          GOOS=linux GOARCH=arm go build -o ./build/glance-agent.arm
          GOOS=linux GOARCH=386 go build -o ./build/glance-agent.i386

      - name: Compress Binary with UPX
        run: |
          upx --best ./build/glance-agent.x86_64
          upx --best ./build/glance-agent.aarch64
          upx --best ./build/glance-agent.arm
          upx --best ./build/glance-agent.i386

      - name: Set Release Prerelease Status
        id: prerelease_check
        run: |
          TAG_NAME="${GITHUB_REF#refs/tags/}"
          IS_PRERELEASE="false"

          if [[ "$TAG_NAME" == *"beta"* || "$TAG_NAME" == *"pre" || "$TAG_NAME" == *"rc"* ]]; then
            IS_PRERELEASE="true"
            echo "This is a pre-release version"
          fi

          echo "IS_PRERELEASE=$IS_PRERELEASE" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          name: Release ${{ github.ref_name }}
          draft: false
          prerelease: ${{ steps.prerelease_check.outputs.IS_PRERELEASE }}
          generate_release_notes: true
          files: |
            ./build/glance-agent.x86_64
            ./build/glance-agent.aarch64
            ./build/glance-agent.arm
            ./build/glance-agent.i386

  build-docker:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          # list of Docker images to use as base name for tags
          images: |
            superninja4965/glance-agent
            ghcr.io/${{ github.repository_owner }}/glance-agent
          tags: |
            type=raw,value=latest,enable={{is_default_branch}}
            type=semver,pattern=v{{version}}
            type=semver,pattern=v{{major}}.{{minor}}
            type=semver,pattern=v{{major}}.{{minor}}.{{patch}}
            type=semver,pattern={{major}}
            type=sha,prefix={{branch}}-

      - name: Login to Docker Hub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Login to GHCR
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64,linux/arm64,linux/arm/v7,linux/386
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
